{"entries":[{"timestamp":1731305615812,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables><variable id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</variable><variable id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</variable><variable id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</variable><variable id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"408\" y=\"20\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">A high value to make sure the first temp is lower\nFunction to execute when Button A is pressed (show highest temp)\nPause for 1 second\nAssign the function to Button A</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global highest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is higher than the highest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update highest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Highest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"20\" y=\"491\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to execute when Button B is pressed (show lowest temp)\nPause for 1 second\nAssign the function to Button B</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global lowest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is lower than the lowest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update lowest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Lowest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":6801,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// A high value to make sure the first temp is lower\n// Function to execute when Button A is pressed (show highest temp)\n// Pause for 1 second\n// Assign the function to Button A\ninput.onButtonPressed(Button.A, function () {\n    // Access the global highest_temp variable\n    current_temp = input.temperature()\n    // Get the current temperature\n    if (current_temp > highest_temp) {\n        // If current temperature is higher than the highest recorded\n        highest_temp = current_temp\n    }\n    // Update highest temperature\n    basic.showNumber(highest_temp * 1.8 + 32)\n    // Convert to Fahrenheit and show it\n    basic.showString(\"F - Highest Temp\")\n    // Label the display\n    basic.pause(1000)\n})\n// Function to execute when Button B is pressed (show lowest temp)\n// Pause for 1 second\n// Assign the function to Button B\ninput.onButtonPressed(Button.B, function () {\n    // Access the global lowest_temp variable\n    current_temp2 = input.temperature()\n    // Get the current temperature\n    if (current_temp2 < lowest_temp) {\n        // If current temperature is lower than the lowest recorded\n        lowest_temp = current_temp2\n    }\n    // Update lowest temperature\n    basic.showNumber(lowest_temp * 1.8 + 32)\n    // Convert to Fahrenheit and show it\n    basic.showString(\"F - Lowest Temp\")\n    // Label the display\n    basic.pause(1000)\n})\nlet current_temp2 = 0\nlet current_temp = 0\nlet lowest_temp = 0\nlet highest_temp = 0\n// Start with initial temperature values\nhighest_temp = -100\n// A low value to make sure the first temp is higher\nlowest_temp = 1000"],[0,"\n"]],"start1":0,"start2":0,"length1":1574,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"blocksprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":217,"start2":217,"length1":68,"length2":44}]},{"type":"added","filename":"main.py","value":"# Start with initial temperature values\nhighest_temp = -100  # A low value to make sure the first temp is higher\nlowest_temp = 1000  # A high value to make sure the first temp is lower\n\n# Function to execute when Button A is pressed (show highest temp)\ndef on_button_pressed_a():\n    global highest_temp  # Access the global highest_temp variable\n    current_temp = input.temperature()  # Get the current temperature\n    if current_temp > highest_temp:  # If current temperature is higher than the highest recorded\n        highest_temp = current_temp  # Update highest temperature\n    basic.show_number(highest_temp * 1.8 + 32)  # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Highest Temp\")  # Label the display\n    basic.pause(1000)  # Pause for 1 second\n\n# Assign the function to Button A\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# Function to execute when Button B is pressed (show lowest temp)\ndef on_button_pressed_b():\n    global lowest_temp  # Access the global lowest_temp variable\n    current_temp = input.temperature()  # Get the current temperature\n    if current_temp < lowest_temp:  # If current temperature is lower than the lowest recorded\n        lowest_temp = current_temp  # Update lowest temperature\n    basic.show_number(lowest_temp * 1.8 + 32)  # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Lowest Temp\")  # Label the display\n    basic.pause(1000)  # Pause for 1 second\n\n# Assign the function to Button B\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n"}]},{"timestamp":1731305879323,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"//"],[-1," "],[0," A high "]],"start1":0,"start2":0,"length1":11,"length2":10},{"diffs":[[0,"lower\n//"],[-1," "],[0," Functio"]],"start1":47,"start2":47,"length1":17,"length2":16},{"diffs":[[0,"highest temp)\n//"],[-1," "],[0," Pause for 1 sec"]],"start1":107,"start2":107,"length1":33,"length2":32},{"diffs":[[0," for 1 second\n//"],[-1," "],[0," Assign the func"]],"start1":129,"start2":129,"length1":33,"length2":32},{"diffs":[[0,"ion "],[-1,"on_button_pressed_a"],[0,"() {\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Acc"]],"start1":215,"start2":215,"length1":44,"length2":19},{"diffs":[[0,"erature()\n    //"],[-1," "],[0," Get the current"]],"start1":300,"start2":300,"length1":33,"length2":32},{"diffs":[[0,"mp) {\n        //"],[-1," "],[0," If current temp"]],"start1":378,"start2":378,"length1":33,"length2":32},{"diffs":[[0,"_temp\n    }\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Update high"]],"start1":484,"start2":484,"length1":36,"length2":30},{"diffs":[[0,"1.8 + 32)\n    //"],[-1," "],[0," Convert to Fahr"]],"start1":566,"start2":566,"length1":33,"length2":32},{"diffs":[[0,"st Temp\")\n    //"],[-1," "],[0," Label the displ"]],"start1":648,"start2":648,"length1":33,"length2":32},{"diffs":[[0,"0)\n})\n//"],[-1," "],[0," Functio"]],"start1":702,"start2":702,"length1":17,"length2":16},{"diffs":[[0,"temp)\n//"],[-1," "],[0," Pause f"]],"start1":769,"start2":769,"length1":17,"length2":16},{"diffs":[[0,"econd\n//"],[-1," "],[0," Assign "]],"start1":791,"start2":791,"length1":17,"length2":16},{"diffs":[[0,"ion "],[-1,"on_button_pressed_b"],[0,"() {\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Acc"]],"start1":869,"start2":869,"length1":44,"length2":19},{"diffs":[[0,")\n    //"],[-1," "],[0," Get the"]],"start1":962,"start2":962,"length1":17,"length2":16},{"diffs":[[0,"      //"],[-1," "],[0," If curr"]],"start1":1040,"start2":1040,"length1":17,"length2":16},{"diffs":[[0,"  }\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Upd"]],"start1":1144,"start2":1144,"length1":20,"length2":14},{"diffs":[[0,")\n    //"],[-1," "],[0," Convert"]],"start1":1224,"start2":1224,"length1":17,"length2":16},{"diffs":[[0,")\n    //"],[-1," "],[0," Label t"]],"start1":1305,"start2":1305,"length1":17,"length2":16},{"diffs":[[0,"p = 0\n//"],[-1," "],[0," Start w"]],"start1":1435,"start2":1435,"length1":17,"length2":16},{"diffs":[[0," -100\n//"],[-1," "],[0," A low v"]],"start1":1496,"start2":1496,"length1":17,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"py"],[1,"blocks"],[0,"prj\"\n}\n"]],"start1":264,"start2":264,"length1":17,"length2":21}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"# Start with initial temperature values\nhighest_temp = -100  # A low value to make sure the first temp is higher\nlowest_temp = 1000  "],[0,"# A high val"]],"start1":0,"start2":0,"length1":12,"length2":145},{"diffs":[[0,"s lower\n"],[1,"\n"],[0,"# Functi"]],"start1":177,"start2":177,"length1":16,"length2":17},{"diffs":[[0,"mp)\n"],[-1,"# Pause for 1 second\n# Assign the function to Button A\n\n"],[0,"def "]],"start1":249,"start2":249,"length1":64,"length2":8},{"diffs":[[0,"obal"],[-1," current_temp,"],[0," hig"]],"start1":286,"start2":286,"length1":22,"length2":8},{"diffs":[[0,"bal highest_temp"],[-1,"\n  "],[0,"  # Access the g"]],"start1":287,"start2":287,"length1":35,"length2":32},{"diffs":[[0,"ut.temperature()"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Get the curren"]],"start1":369,"start2":369,"length1":37,"length2":34},{"diffs":[[0," > highest_temp:"],[-1,"\n      "],[0,"  # If current t"]],"start1":436,"start2":436,"length1":39,"length2":32},{"diffs":[[0,"ent_temp"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Update"]],"start1":542,"start2":542,"length1":21,"length2":18},{"diffs":[[0,"temp * 1.8 + 32)"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Convert to Fah"]],"start1":611,"start2":611,"length1":37,"length2":34},{"diffs":[[0,"- Highest Temp\")"],[-1,"\n  "],[0,"  # Label the di"]],"start1":690,"start2":690,"length1":35,"length2":32},{"diffs":[[0,"asic.pause(1000)"],[1,"  # Pause for 1 second\n\n# Assign the function to Button A"],[0,"\ninput.on_button"]],"start1":733,"start2":733,"length1":32,"length2":89},{"diffs":[[0,"mp)\n"],[-1,"# Pause for 1 second\n# Assign the function to Button B\n\n"],[0,"def "]],"start1":925,"start2":925,"length1":64,"length2":8},{"diffs":[[0,"obal"],[-1," current_temp2,"],[0," low"]],"start1":962,"start2":962,"length1":23,"length2":8},{"diffs":[[0,"est_temp"],[-1,"\n  "],[0,"  # Acce"]],"start1":970,"start2":970,"length1":19,"length2":16},{"diffs":[[0,"ent_temp"],[-1,"2"],[0," = input"]],"start1":1029,"start2":1029,"length1":17,"length2":16},{"diffs":[[0,"rature()"],[-1,"\n  "],[0,"  # Get "]],"start1":1051,"start2":1051,"length1":19,"length2":16},{"diffs":[[0,"ent_temp"],[-1,"2"],[0," < lowes"]],"start1":1102,"start2":1102,"length1":17,"length2":16},{"diffs":[[0,"st_temp:"],[-1,"\n     "],[0,"  "],[-1," "],[0,"# If cur"]],"start1":1117,"start2":1117,"length1":25,"length2":18},{"diffs":[[0,"temp"],[-1,"2\n  "],[0,"  # "]],"start1":1216,"start2":1216,"length1":12,"length2":8},{"diffs":[[0,".8 + 32)"],[-1,"\n  "],[0,"  # Conv"]],"start1":1287,"start2":1287,"length1":19,"length2":16},{"diffs":[[0,"t Temp\")"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Label "]],"start1":1365,"start2":1365,"length1":21,"length2":18},{"diffs":[[0,"000)"],[-1,"\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ncurrent_temp2 = 0\ncurrent_temp = 0\nlowest_temp = 0\nhighest_temp = 0\n# Start with initial temperature values\nhighest_temp = -100\n# A low value to make sure the first temp is higher\nlowest_temp = 1000"],[1,"  # Pause for 1 second\n\n# Assign the function to Button B\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n"]],"start1":1412,"start2":1412,"length1":259,"length2":117}]}]},{"timestamp":1731306269845,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\" x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><stat"]],"start1":336,"start2":336,"length1":22,"length2":24},{"diffs":[[0," x=\""],[-1,"38"],[1,"40"],[0,"8\" y=\""],[1,"2"],[0,"0\"><"]],"start1":1018,"start2":1018,"length1":16,"length2":17},{"diffs":[[0," x=\""],[1,"2"],[0,"0\" y=\"4"],[-1,"7"],[1,"9"],[0,"1\"><"]],"start1":3958,"start2":3958,"length1":16,"length2":17}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//  Start with initial temperature values\nlet highest_temp = -100\n//  A low value to make sure the first temp is higher\nlet lowest_temp = 1000\n"],[0,"//  "]],"start1":0,"start2":0,"length1":147,"length2":4},{"diffs":[[0,"mp variable\n    "],[-1,"let "],[0,"current_temp = i"]],"start1":288,"start2":288,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"let "],[0,"curr"]],"start1":991,"start2":991,"length1":12,"length2":8},{"diffs":[[0,"    current_temp"],[1,"2"],[0," = input.tempera"]],"start1":991,"start2":991,"length1":32,"length2":33},{"diffs":[[0,"ent_temp"],[1,"2"],[0," < lowes"]],"start1":1079,"start2":1079,"length1":16,"length2":17},{"diffs":[[0,"p = current_temp"],[1,"2"],[0,"\n    }\n    \n    "]],"start1":1193,"start2":1193,"length1":32,"length2":33},{"diffs":[[0,"ay\n    basic.pause(1000)\n})\n"],[1,"let current_temp2 = 0\nlet current_temp = 0\nlet lowest_temp = 0\nlet highest_temp = 0\n//  Start with initial temperature values\nhighest_temp = -100\n//  A low value to make sure the first temp is higher\nlowest_temp = 1000\n"]],"start1":1406,"start2":1406,"length1":28,"length2":247}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"# Start with initial temperature values\nhighest_temp = -100  # A low value to make sure the first temp is higher\nlowest_temp = 1000  "],[0,"# A "]],"start1":0,"start2":0,"length1":137,"length2":4},{"diffs":[[0,"s lower\n"],[-1,"\n"],[0,"# Functi"]],"start1":44,"start2":44,"length1":17,"length2":16},{"diffs":[[0,"w highest temp)\n"],[1,"# Pause for 1 second\n# Assign the function to Button A\n\n"],[0,"def on_button_pr"]],"start1":103,"start2":103,"length1":32,"length2":88},{"diffs":[[0,":\n    global"],[1," current_temp,"],[0," highest_tem"]],"start1":200,"start2":200,"length1":24,"length2":38},{"diffs":[[0,"mp, highest_temp"],[1,"\n  "],[0,"  # Access the g"]],"start1":223,"start2":223,"length1":32,"length2":35},{"diffs":[[0,"ut.temperature()"],[1,"\n "],[0,"  "],[1," "],[0,"# Get the curren"]],"start1":308,"start2":308,"length1":34,"length2":37},{"diffs":[[0," > highest_temp:"],[1,"\n      "],[0,"  # If current t"]],"start1":378,"start2":378,"length1":32,"length2":39},{"diffs":[[0,"p = current_temp"],[1,"\n "],[0,"  "],[1," "],[0,"# Update highest"]],"start1":483,"start2":483,"length1":34,"length2":37},{"diffs":[[0,"temp * 1.8 + 32)"],[1,"\n "],[0,"  "],[1," "],[0,"# Convert to Fah"]],"start1":563,"start2":563,"length1":34,"length2":37},{"diffs":[[0,"- Highest Temp\")"],[1,"\n  "],[0,"  # Label the di"]],"start1":645,"start2":645,"length1":32,"length2":35},{"diffs":[[0,"000)"],[-1,"  # Pause for 1 second\n\n# Assign the function to Button A"],[0,"\ninp"]],"start1":703,"start2":703,"length1":65,"length2":8},{"diffs":[[0,"t temp)\n"],[1,"# Pause for 1 second\n# Assign the function to Button B\n\n"],[0,"def on_b"]],"start1":822,"start2":822,"length1":16,"length2":72},{"diffs":[[0,":\n    global"],[1," current_temp2,"],[0," lowest_temp"]],"start1":911,"start2":911,"length1":24,"length2":39},{"diffs":[[0," lowest_temp"],[1,"\n  "],[0,"  # Access t"]],"start1":938,"start2":938,"length1":24,"length2":27},{"diffs":[[0,"    current_temp"],[1,"2"],[0," = input.tempera"]],"start1":996,"start2":996,"length1":32,"length2":33},{"diffs":[[0,"rature()"],[1,"\n  "],[0,"  # Get "]],"start1":1027,"start2":1027,"length1":16,"length2":19},{"diffs":[[0,"ent_temp"],[1,"2"],[0," < lowes"]],"start1":1081,"start2":1081,"length1":16,"length2":17},{"diffs":[[0,"st_temp:"],[1,"\n     "],[0,"  "],[1," "],[0,"# If cur"]],"start1":1097,"start2":1097,"length1":18,"length2":25},{"diffs":[[0,"ent_temp"],[1,"2\n  "],[0,"  # Upda"]],"start1":1199,"start2":1199,"length1":16,"length2":20},{"diffs":[[0,".8 + 32)"],[1,"\n  "],[0,"  # Conv"]],"start1":1278,"start2":1278,"length1":16,"length2":19},{"diffs":[[0,"t Temp\")"],[1,"\n "],[0,"  "],[1," "],[0,"# Label "]],"start1":1359,"start2":1359,"length1":18,"length2":21},{"diffs":[[0,"000)"],[-1,"  # Pause for 1 second\n\n# Assign the function to Button B\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n"],[1,"\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ncurrent_temp2 = 0\ncurrent_temp = 0\nlowest_temp = 0\nhighest_temp = 0\n# Start with initial temperature values\nhighest_temp = -100\n# A low value to make sure the first temp is higher\nlowest_temp = 1000"]],"start1":1409,"start2":1409,"length1":117,"length2":259}]}]},{"timestamp":1731306644575,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_button_event\" x"],[1,"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w"],[0,"=\"1"],[1,"6"],[0,"0\""],[1,">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"388\""],[0," y=\""],[-1,"1"],[0,"0\"><"]],"start1":323,"start2":323,"length1":40,"length2":709},{"diffs":[[0," x=\""],[-1,"1"],[0,"0\" y=\""],[1,"47"],[0,"1"],[-1,"0"],[0,"\"><f"]],"start1":3955,"start2":3955,"length1":17,"length2":17},{"diffs":[[0,"ck><"],[-1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><"],[0,"/xml"]],"start1":6802,"start2":6802,"length1":679,"length2":8}]}]},{"timestamp":1731307806076,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"blocks"],[1,"py"],[0,"prj\"\n}\n"]],"start1":264,"start2":264,"length1":21,"length2":17}]}]},{"timestamp":1731307806165,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"408"],[1,"device_button_event\" x=\"10"],[0,"\" y=\""],[-1,"2"],[1,"1"],[0,"0\"><"]],"start1":323,"start2":323,"length1":712,"length2":40},{"diffs":[[0," x=\""],[-1,"2"],[1,"1"],[0,"0\" y=\""],[-1,"49"],[0,"1"],[1,"0"],[0,"\"><f"]],"start1":3286,"start2":3286,"length1":18,"length2":17},{"diffs":[[0,"/block><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><"],[0,"/xml>"]],"start1":6129,"start2":6129,"length1":13,"length2":684}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"//"],[1,"  Start with initial temperature values\nlet highest_temp = -100\n//  A low value to make sure the first temp is higher\nlet lowest_temp = 1000\n// "],[0," A high "]],"start1":0,"start2":0,"length1":10,"length2":154},{"diffs":[[0,"lower\n//"],[1," "],[0," Functio"]],"start1":191,"start2":191,"length1":16,"length2":17},{"diffs":[[0,"highest temp)\n//"],[1," "],[0," Pause for 1 sec"]],"start1":252,"start2":252,"length1":32,"length2":33},{"diffs":[[0," for 1 second\n//"],[1," "],[0," Assign the func"]],"start1":275,"start2":275,"length1":32,"length2":33},{"diffs":[[0,"A, function "],[1,"on_button_pressed_a"],[0,"() {\n"],[1,"    \n"],[0,"    //"],[1," "],[0," Access the "]],"start1":354,"start2":354,"length1":35,"length2":60},{"diffs":[[0,"mp variable\n    "],[1,"let "],[0,"current_temp = i"]],"start1":431,"start2":431,"length1":32,"length2":36},{"diffs":[[0,"erature()\n    //"],[1," "],[0," Get the current"]],"start1":476,"start2":476,"length1":32,"length2":33},{"diffs":[[0,"mp) {\n        //"],[1," "],[0," If current temp"]],"start1":555,"start2":555,"length1":32,"length2":33},{"diffs":[[0,"_temp\n    }\n"],[1,"    \n"],[0,"    //"],[1," "],[0," Update high"]],"start1":662,"start2":662,"length1":30,"length2":36},{"diffs":[[0,"1.8 + 32)\n    //"],[1," "],[0," Convert to Fahr"]],"start1":750,"start2":750,"length1":32,"length2":33},{"diffs":[[0,"st Temp\")\n    //"],[1," "],[0," Label the displ"]],"start1":833,"start2":833,"length1":32,"length2":33},{"diffs":[[0,"0)\n})\n//"],[1," "],[0," Functio"]],"start1":888,"start2":888,"length1":16,"length2":17},{"diffs":[[0,"temp)\n//"],[1," "],[0," Pause f"]],"start1":956,"start2":956,"length1":16,"length2":17},{"diffs":[[0,"econd\n//"],[1," "],[0," Assign "]],"start1":979,"start2":979,"length1":16,"length2":17},{"diffs":[[0,"ion "],[1,"on_button_pressed_b"],[0,"() {\n"],[1,"    \n"],[0,"    //"],[1," "],[0," Acc"]],"start1":1058,"start2":1058,"length1":19,"length2":44},{"diffs":[[0,"ble\n    "],[1,"let "],[0,"current_"]],"start1":1134,"start2":1134,"length1":16,"length2":20},{"diffs":[[0,"ent_temp"],[-1,"2"],[0," = input"]],"start1":1150,"start2":1150,"length1":17,"length2":16},{"diffs":[[0,")\n    //"],[1," "],[0," Get the"]],"start1":1179,"start2":1179,"length1":16,"length2":17},{"diffs":[[0,"ent_temp"],[-1,"2"],[0," < lowes"]],"start1":1229,"start2":1229,"length1":17,"length2":16},{"diffs":[[0,"      //"],[1," "],[0," If curr"]],"start1":1257,"start2":1257,"length1":16,"length2":17},{"diffs":[[0,"temp"],[-1,"2"],[0,"\n    }\n"],[1,"    \n"],[0,"    //"],[1," "],[0," Upd"]],"start1":1354,"start2":1354,"length1":22,"length2":27},{"diffs":[[0,")\n    //"],[1," "],[0," Convert"]],"start1":1447,"start2":1447,"length1":16,"length2":17},{"diffs":[[0,")\n    //"],[1," "],[0," Label t"]],"start1":1529,"start2":1529,"length1":16,"length2":17},{"diffs":[[0,"\n})\n"],[-1,"let current_temp2 = 0\nlet current_temp = 0\nlet lowest_temp = 0\nlet highest_temp = 0\n// Start with initial temperature values\nhighest_temp = -100\n// A low value to make sure the first temp is higher\nlowest_temp = 1000\n"]],"start1":1578,"start2":1578,"length1":221,"length2":4}]}]},{"timestamp":1731307806878,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\" x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><stat"]],"start1":336,"start2":336,"length1":22,"length2":24},{"diffs":[[0," x=\""],[-1,"38"],[1,"40"],[0,"8\" y=\""],[1,"2"],[0,"0\"><"]],"start1":1018,"start2":1018,"length1":16,"length2":17},{"diffs":[[0," x=\""],[1,"2"],[0,"0\" y=\"4"],[-1,"7"],[1,"9"],[0,"1\"><"]],"start1":3958,"start2":3958,"length1":16,"length2":17}]}]},{"timestamp":1731308665535,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"# Start with initial temperature values\nhighest_temp = -100  # A low value to make sure the first temp is higher\nlowest_temp = 1000  "],[0,"# A high val"]],"start1":0,"start2":0,"length1":12,"length2":145},{"diffs":[[0,"s lower\n"],[1,"\n"],[0,"# Functi"]],"start1":177,"start2":177,"length1":16,"length2":17},{"diffs":[[0,"mp)\n"],[-1,"# Pause for 1 second\n# Assign the function to Button A\n\n"],[0,"def "]],"start1":249,"start2":249,"length1":64,"length2":8},{"diffs":[[0,"obal"],[-1," current_temp,"],[0," hig"]],"start1":286,"start2":286,"length1":22,"length2":8},{"diffs":[[0,"bal highest_temp"],[-1,"\n  "],[0,"  # Access the g"]],"start1":287,"start2":287,"length1":35,"length2":32},{"diffs":[[0,"ut.temperature()"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Get the curren"]],"start1":369,"start2":369,"length1":37,"length2":34},{"diffs":[[0," > highest_temp:"],[-1,"\n      "],[0,"  # If current t"]],"start1":436,"start2":436,"length1":39,"length2":32},{"diffs":[[0,"ent_temp"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Update"]],"start1":542,"start2":542,"length1":21,"length2":18},{"diffs":[[0,"temp * 1.8 + 32)"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Convert to Fah"]],"start1":611,"start2":611,"length1":37,"length2":34},{"diffs":[[0,"- Highest Temp\")"],[-1,"\n  "],[0,"  # Label the di"]],"start1":690,"start2":690,"length1":35,"length2":32},{"diffs":[[0,"asic.pause(1000)"],[1,"  # Pause for 1 second\n\n# Assign the function to Button A"],[0,"\ninput.on_button"]],"start1":733,"start2":733,"length1":32,"length2":89},{"diffs":[[0,"mp)\n"],[-1,"# Pause for 1 second\n# Assign the function to Button B\n\n"],[0,"def "]],"start1":925,"start2":925,"length1":64,"length2":8},{"diffs":[[0,"obal"],[-1," current_temp2,"],[0," low"]],"start1":962,"start2":962,"length1":23,"length2":8},{"diffs":[[0,"est_temp"],[-1,"\n  "],[0,"  # Acce"]],"start1":970,"start2":970,"length1":19,"length2":16},{"diffs":[[0,"ent_temp"],[-1,"2"],[0," = input"]],"start1":1029,"start2":1029,"length1":17,"length2":16},{"diffs":[[0,"rature()"],[-1,"\n  "],[0,"  # Get "]],"start1":1051,"start2":1051,"length1":19,"length2":16},{"diffs":[[0,"ent_temp"],[-1,"2"],[0," < lowes"]],"start1":1102,"start2":1102,"length1":17,"length2":16},{"diffs":[[0,"st_temp:"],[-1,"\n     "],[0,"  "],[-1," "],[0,"# If cur"]],"start1":1117,"start2":1117,"length1":25,"length2":18},{"diffs":[[0,"temp"],[-1,"2\n  "],[0,"  # "]],"start1":1216,"start2":1216,"length1":12,"length2":8},{"diffs":[[0,".8 + 32)"],[-1,"\n  "],[0,"  # Conv"]],"start1":1287,"start2":1287,"length1":19,"length2":16},{"diffs":[[0,"t Temp\")"],[-1,"\n "],[0,"  "],[-1," "],[0,"# Label "]],"start1":1365,"start2":1365,"length1":21,"length2":18},{"diffs":[[0,"000)"],[-1,"\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ncurrent_temp2 = 0\ncurrent_temp = 0\nlowest_temp = 0\nhighest_temp = 0\n# Start with initial temperature values\nhighest_temp = -100\n# A low value to make sure the first temp is higher\nlowest_temp = 1000"],[1,"  # Pause for 1 second\n\n# Assign the function to Button B\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n"]],"start1":1412,"start2":1412,"length1":259,"length2":117}]}]},{"timestamp":1731308667284,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ble id=\""],[-1,"_hpkk{DfIx=?uJy*:xT,"],[1,"Xi~7[-,oI}?w#yj*k.9+"],[0,"\">curren"]],"start1":72,"start2":72,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"0f3Cp1CX^MK[AFQFXB)}"],[1,"BQm{Cehm;+;vpZB46l$l"],[0,"\">highes"]],"start1":131,"start2":131,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"Iy4qzRd14dA^@x$D4bJB"],[1,"-rLJFt-cm7m=GG?oEUgb"],[0,"\">curren"]],"start1":190,"start2":190,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</variable></variables><block type=\"every_interval\" x=\"-20\" y=\"-169\"><comment pinned=\"false\" h=\"80\" w=\"160\">Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\nThe 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\nThe temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\nThe algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\nThe 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.</comment><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">60000</field></shadow></value><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value></block></statement></block"],[1,"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</variable></variables"],[0,"><bl"]],"start1":254,"start2":254,"length1":1851,"length2":63},{"diffs":[[0," x=\""],[-1,"-23"],[1,"0"],[0,"\" y=\""],[-1,"15"],[1,"0"],[0,"\"><s"]],"start1":340,"start2":340,"length1":18,"length2":15},{"diffs":[[0,"AR\" id=\""],[-1,"0f3Cp1CX^MK[AFQFXB)}"],[1,"BQm{Cehm;+;vpZB46l$l"],[0,"\">highes"]],"start1":421,"start2":421,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"4l|bs6|nz.wv#QsEuAe7"],[1,"GHLqo30n?Y.0EX?%!5[`"],[0,"\">lowest"]],"start1":699,"start2":699,"length1":36,"length2":36},{"diffs":[[0," x=\""],[-1,"-27"],[1,"388"],[0,"\" y=\""],[-1,"25"],[0,"0\"><"]],"start1":1016,"start2":1016,"length1":18,"length2":16},{"diffs":[[0,"AR\" id=\""],[-1,"_hpkk{DfIx=?uJy*:xT,"],[1,"Xi~7[-,oI}?w#yj*k.9+"],[0,"\">curren"]],"start1":1348,"start2":1348,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"_hpkk{DfIx=?uJy*:xT,"],[1,"Xi~7[-,oI}?w#yj*k.9+"],[0,"\">curren"]],"start1":1989,"start2":1989,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"0f3Cp1CX^MK[AFQFXB)}"],[1,"BQm{Cehm;+;vpZB46l$l"],[0,"\">highes"]],"start1":2176,"start2":2176,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"0f3Cp1CX^MK[AFQFXB)}"],[1,"BQm{Cehm;+;vpZB46l$l"],[0,"\">highes"]],"start1":2322,"start2":2322,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"_hpkk{DfIx=?uJy*:xT,"],[1,"Xi~7[-,oI}?w#yj*k.9+"],[0,"\">cu"]],"start1":2608,"start2":2608,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"0f3Cp1CX^MK[AFQFXB)}"],[1,"BQm{Cehm;+;vpZB46l$l"],[0,"\">hi"]],"start1":3150,"start2":3150,"length1":28,"length2":28},{"diffs":[[0," x=\""],[-1,"581"],[1,"0"],[0,"\" y=\""],[-1,"266"],[1,"471"],[0,"\"><f"]],"start1":3955,"start2":3955,"length1":19,"length2":17},{"diffs":[[0,"AR\" id=\""],[-1,"Iy4qzRd14dA^@x$D4bJB"],[1,"-rLJFt-cm7m=GG?oEUgb"],[0,"\">curren"]],"start1":4236,"start2":4236,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"Iy4qzRd14dA^@x$D4bJB"],[1,"-rLJFt-cm7m=GG?oEUgb"],[0,"\">curren"]],"start1":4877,"start2":4877,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"4l|bs6|nz.wv#QsEuAe7"],[1,"GHLqo30n?Y.0EX?%!5[`"],[0,"\">lowest"]],"start1":5065,"start2":5065,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"4l|bs6|nz.wv#QsEuAe7"],[1,"GHLqo30n?Y.0EX?%!5[`"],[0,"\">lowest"]],"start1":5210,"start2":5210,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"Iy4qzRd14dA^@x$D4bJB"],[1,"-rLJFt-cm7m=GG?oEUgb"],[0,"\">cu"]],"start1":5493,"start2":5493,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"4l|bs6|nz.wv#QsEuAe7"],[1,"GHLqo30n?Y.0EX?%!5[`"],[0,"\">lo"]],"start1":6035,"start2":6035,"length1":28,"length2":28}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"//"],[-1," "],[0," A high "]],"start1":0,"start2":0,"length1":11,"length2":10},{"diffs":[[0,"lower\n//"],[-1," "],[0," Functio"]],"start1":47,"start2":47,"length1":17,"length2":16},{"diffs":[[0,"highest temp)\n//"],[-1," "],[0," Pause for 1 sec"]],"start1":107,"start2":107,"length1":33,"length2":32},{"diffs":[[0," for 1 second\n//"],[-1," "],[0," Assign the func"]],"start1":129,"start2":129,"length1":33,"length2":32},{"diffs":[[0,"ion "],[-1,"on_button_pressed_a"],[0,"() {\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Acc"]],"start1":215,"start2":215,"length1":44,"length2":19},{"diffs":[[0,"erature()\n    //"],[-1," "],[0," Get the current"]],"start1":300,"start2":300,"length1":33,"length2":32},{"diffs":[[0,"mp) {\n        //"],[-1," "],[0," If current temp"]],"start1":378,"start2":378,"length1":33,"length2":32},{"diffs":[[0,"_temp\n    }\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Update high"]],"start1":484,"start2":484,"length1":36,"length2":30},{"diffs":[[0,"1.8 + 32)\n    //"],[-1," "],[0," Convert to Fahr"]],"start1":566,"start2":566,"length1":33,"length2":32},{"diffs":[[0,"st Temp\")\n    //"],[-1," "],[0," Label the displ"]],"start1":648,"start2":648,"length1":33,"length2":32},{"diffs":[[0,"0)\n})\n//"],[-1," "],[0," Functio"]],"start1":702,"start2":702,"length1":17,"length2":16},{"diffs":[[0,"temp)\n//"],[-1," "],[0," Pause f"]],"start1":769,"start2":769,"length1":17,"length2":16},{"diffs":[[0,"econd\n//"],[-1," "],[0," Assign "]],"start1":791,"start2":791,"length1":17,"length2":16},{"diffs":[[0,"ion "],[-1,"on_button_pressed_b"],[0,"() {\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Acc"]],"start1":869,"start2":869,"length1":44,"length2":19},{"diffs":[[0,")\n    //"],[-1," "],[0," Get the"]],"start1":962,"start2":962,"length1":17,"length2":16},{"diffs":[[0,"      //"],[-1," "],[0," If curr"]],"start1":1040,"start2":1040,"length1":17,"length2":16},{"diffs":[[0,"  }\n"],[-1,"    \n"],[0,"    //"],[-1," "],[0," Upd"]],"start1":1144,"start2":1144,"length1":20,"length2":14},{"diffs":[[0,")\n    //"],[-1," "],[0," Convert"]],"start1":1224,"start2":1224,"length1":17,"length2":16},{"diffs":[[0,")\n    //"],[-1," "],[0," Label t"]],"start1":1305,"start2":1305,"length1":17,"length2":16},{"diffs":[[0,"p = 0\n//"],[-1," "],[0," Start w"]],"start1":1435,"start2":1435,"length1":17,"length2":16},{"diffs":[[0," -100\n//"],[-1," "],[0," A low v"]],"start1":1496,"start2":1496,"length1":17,"length2":16},{"diffs":[[0,"000\n"],[-1,"//  Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n//  'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n//  'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\n//  The 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\n//  The temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\n//  The algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\n//  The 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n//  'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.\nloops.everyInterval(60000, function on_every_interval() {\n    basic.showNumber(input.temperature() * 1.8 + 32)\n})\n"]],"start1":1570,"start2":1570,"length1":1099,"length2":4}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"py"],[1,"blocks"],[0,"prj\"\n}\n"]],"start1":264,"start2":264,"length1":17,"length2":21}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"1000"],[-1,"\n\n# Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n# 'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n# 'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\n# The 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\n# The temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\n# The algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\n# The 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n# 'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.\n\ndef on_every_interval():\n    basic.show_number(input.temperature() * 1.8 + 32)\nloops.every_interval(60000, on_every_interval)\n"]],"start1":1664,"start2":1664,"length1":1098,"length2":4}]}]},{"timestamp":1731308810621,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," = 1000\n"],[1,"\n"],[0,"# Defini"]],"start1":1661,"start2":1661,"length1":16,"length2":17}]}]},{"timestamp":1731309339138,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"//  "],[-1,"Start with defining initial placeholder temperature values\nlet current_temp2 = 0\nlet current_temp = 0\nlet lowest_temp = 0\nlet highest_temp = 0\n//  A low value to make sure the first temp is higher\nhighest_temp = -100\n//  A low"],[1,"A high"],[0," val"]],"start1":0,"start2":0,"length1":234,"length2":14},{"diffs":[[0,"wer\n"],[-1,"lowest_temp = 1000\n"],[0,"//  "]],"start1":50,"start2":50,"length1":27,"length2":8},{"diffs":[[0,"se(1000)\n})\n"],[1,"let current_temp2 = 0\nlet current_temp = 0\nlet lowest_temp = 0\nlet highest_temp = 0\n//  Start with initial temperature values\nhighest_temp = -100\n//  A low value to make sure the first temp is higher\nlowest_temp = 1000\n"],[0,"//  Defining"]],"start1":1422,"start2":1422,"length1":24,"length2":243}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"# "],[-1,"Start with defining initial placeholder temperature values\ncurrent_temp2 = 0\ncurrent_temp = 0\nlowest_temp = 0\nhighest_temp = 0\n\n# A low value to make sure the first temp is higher\nhighest_temp = -100\n# A low"],[1,"A high"],[0," val"]],"start1":0,"start2":0,"length1":213,"length2":12},{"diffs":[[0,"wer\n"],[-1,"lowest_temp = 1000\n\n"],[0,"# Fu"]],"start1":48,"start2":48,"length1":28,"length2":8},{"diffs":[[0,"sed_b)\n\n"],[1,"current_temp2 = 0\ncurrent_temp = 0\nlowest_temp = 0\nhighest_temp = 0\n# Start with initial temperature values\nhighest_temp = -100\n# A low value to make sure the first temp is higher\nlowest_temp = 1000\n"],[0,"# Defini"]],"start1":1462,"start2":1462,"length1":16,"length2":215}]}]},{"timestamp":1731310242669,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"\n\n# "],[-1,"Define f"],[1,"F"],[0,"unct"]],"start1":271,"start2":271,"length1":16,"length2":9}]}]},{"timestamp":1731310557601,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"temp2 = "],[-1,"input.temperature()"],[1,"0"],[0,"\nlet cur"]],"start1":75,"start2":75,"length1":35,"length2":17},{"diffs":[[0,"_temp = "],[-1,"input.temperature()"],[1,"0"],[0,"\nlet low"]],"start1":96,"start2":96,"length1":35,"length2":17},{"diffs":[[0,"//  "],[-1,"Define f"],[1,"F"],[0,"unct"]],"start1":293,"start2":293,"length1":16,"length2":9}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"2 = "],[-1,"input.temperature()\ncurrent_temp = input.temperature()"],[1,"0\ncurrent_temp = 0"],[0,"\nlow"]],"start1":73,"start2":73,"length1":62,"length2":26}]}]},{"timestamp":1731311105664,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"= 0\n"],[-1,"// WILL OVERWRITE LATER\nlet highest_temp = 0\n// WILL OVERWRITE LATER"],[1,"let highest_temp = 0"],[0,"\n// "]],"start1":158,"start2":158,"length1":76,"length2":28},{"diffs":[[0,"n A\n"],[-1,"// Invoke Function by Pressing \"A\" Button\n"],[0,"inpu"]],"start1":460,"start2":460,"length1":50,"length2":8},{"diffs":[[0,"essed_a() {\n"],[1,"    \n"],[0,"    //  Acce"]],"start1":517,"start2":517,"length1":24,"length2":29},{"diffs":[[0,"ble\n"],[-1,"    \n    //  NOT NECCASARY; PREDEFINED ABOVE; PURPOSE: Get the current temperature\n"],[0,"    "]],"start1":578,"start2":578,"length1":91,"length2":8},{"diffs":[[0,"ature()\n    //  "],[-1,"If"],[1,"Get the"],[0," current tempera"]],"start1":613,"start2":613,"length1":34,"length2":39},{"diffs":[[0,"ture"],[-1," is higher than the highest recorded"],[0,"\n   "]],"start1":652,"start2":652,"length1":44,"length2":8},{"diffs":[[0,"//  "],[-1,"Update highest temperature"],[1,"If current temperature is higher than the highest recorded"],[0,"\n   "]],"start1":704,"start2":704,"length1":34,"length2":66},{"diffs":[[0,"//  "],[-1,"Convert to Fahrenheit and show it"],[1,"Update highest temperature"],[0,"\n   "]],"start1":818,"start2":818,"length1":41,"length2":34},{"diffs":[[0,"    //  "],[-1,"Label the display"],[1,"Convert to Fahrenheit and show it"],[0,"\n    bas"]],"start1":895,"start2":895,"length1":33,"length2":49},{"diffs":[[0,"//  "],[-1,"Pause 1 second"],[1,"Label the display"],[0,"\n   "]],"start1":982,"start2":982,"length1":22,"length2":25}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," = 0"],[-1," #WILL OVERWRITE LATER\nhighest_temp = 0 #WILL OVERWRITE LATER"],[1,"\nhighest_temp = 0"],[0,"\n\n# "]],"start1":143,"start2":143,"length1":69,"length2":25},{"diffs":[[0,"utton A\n"],[1,"\n"],[0,"def on_b"]],"start1":430,"start2":430,"length1":16,"length2":17},{"diffs":[[0,"ressed_a():\n"],[1,"    global current_temp, highest_temp\n"],[0,"    # Access"]],"start1":454,"start2":454,"length1":24,"length2":62},{"diffs":[[0,"ariable\n    "],[-1,"global "],[0,"current_temp"]],"start1":542,"start2":542,"length1":31,"length2":24},{"diffs":[[0,"temp"],[-1,", highest_temp\n    # NOT NECCASARY; PREDEFINED ABOVE; PURPOSE:"],[1," = input.temperature()\n    #"],[0," Get"]],"start1":562,"start2":562,"length1":70,"length2":36},{"diffs":[[0,"erature\n    "],[1,"if "],[0,"current_temp"]],"start1":615,"start2":615,"length1":24,"length2":27},{"diffs":[[0,"nt_temp "],[-1,"= input.temperature()\n"],[1,"> highest_temp:\n    "],[0,"    # If"]],"start1":635,"start2":635,"length1":38,"length2":36},{"diffs":[[0,"    "],[-1,"if current_temp > highest_temp:\n        # Update highest temperature\n        highest_temp = current_temp\n    # Convert to Fahrenheit and show it"],[1,"    highest_temp = current_temp\n    # Update highest temperature"],[0,"\n   "]],"start1":728,"start2":728,"length1":152,"length2":72},{"diffs":[[0,")\n    # "],[-1,"Label the display"],[1,"Convert to Fahrenheit and show it"],[0,"\n    bas"]],"start1":842,"start2":842,"length1":33,"length2":49},{"diffs":[[0,"  # "],[-1,"Pause 1 second"],[1,"Label the display"],[0,"\n   "]],"start1":928,"start2":928,"length1":22,"length2":25},{"diffs":[[0,"00)\n"],[-1,"#Invoke Function by Pressing \"A\" Button\n"],[0,"inpu"]],"start1":968,"start2":968,"length1":48,"length2":8},{"diffs":[[0,"utton B\n"],[1,"\n"],[0,"def on_b"]],"start1":1141,"start2":1141,"length1":16,"length2":17}]}]},{"timestamp":1731311690281,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"My "],[1,"LArrys"],[0,"\",\n "]],"start1":11,"start2":11,"length1":11,"length2":14}]}]},{"timestamp":1731318253899,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"Wee"],[1,"My "],[0,"\",\n "]],"start1":11,"start2":11,"length1":11,"length2":11}]}]},{"timestamp":1731318255359,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"every_interval\" x=\"-20\" y=\"-169\"><comment pinned=\"false\" h=\"80\" w=\"160\">Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\nThe 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\nThe temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\nThe algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\nThe 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.</comment><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">60000</field></shadow></value><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"-23\" y=\"15\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"-27\" y=\"250\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">A high value to make sure the first temp is lower\nFunction to execute when Button A is pressed (show highest temp)\nPause for 1 second\nAssign the function to Button A</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global highest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is higher than the highest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update highest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Highest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"581\" y=\"266\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to execute when Button B is pressed (show lowest temp)\nPause for 1 second\nAssign the function to Button B</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global lowest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is lower than the lowest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update lowest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Lowest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><"],[0,"/xml>"]],"start1":307,"start2":307,"length1":13,"length2":8299}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\"Wee"],[-1,"k 3 Temperature Program"],[0,"\",\n "]],"start1":14,"start2":14,"length1":31,"length2":8},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":241,"start2":241,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1731305615811,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"LArrys\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1731307806076,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</variable><variable id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</variable><variable id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</variable><variable id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"388\" y=\"0\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">A high value to make sure the first temp is lower\nFunction to execute when Button A is pressed (show highest temp)\nPause for 1 second\nAssign the function to Button A</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global highest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is higher than the highest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Xi~7[-,oI}?w#yj*k.9+\">current_temp</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update highest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BQm{Cehm;+;vpZB46l$l\">highest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Highest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"0\" y=\"471\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to execute when Button B is pressed (show lowest temp)\nPause for 1 second\nAssign the function to Button B</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global lowest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is lower than the lowest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"-rLJFt-cm7m=GG?oEUgb\">current_temp2</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update lowest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"GHLqo30n?Y.0EX?%!5[`\">lowest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Lowest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","main.py":"# Start with initial temperature values\nhighest_temp = -100  # A low value to make sure the first temp is higher\nlowest_temp = 1000  # A high value to make sure the first temp is lower\n\n# Function to execute when Button A is pressed (show highest temp)\ndef on_button_pressed_a():\n    global highest_temp  # Access the global highest_temp variable\n    current_temp = input.temperature()  # Get the current temperature\n    if current_temp > highest_temp:  # If current temperature is higher than the highest recorded\n        highest_temp = current_temp  # Update highest temperature\n    basic.show_number(highest_temp * 1.8 + 32)  # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Highest Temp\")  # Label the display\n    basic.pause(1000)  # Pause for 1 second\n\n# Assign the function to Button A\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# Function to execute when Button B is pressed (show lowest temp)\ndef on_button_pressed_b():\n    global lowest_temp  # Access the global lowest_temp variable\n    current_temp = input.temperature()  # Get the current temperature\n    if current_temp < lowest_temp:  # If current temperature is lower than the lowest recorded\n        lowest_temp = current_temp  # Update lowest temperature\n    basic.show_number(lowest_temp * 1.8 + 32)  # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Lowest Temp\")  # Label the display\n    basic.pause(1000)  # Pause for 1 second\n\n# Assign the function to Button B\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n","pxt.json":"{\n    \"name\": \"LArrys\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1731309610398,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</variable><variable id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</variable><variable id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</variable><variable id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</variable></variables><block type=\"every_interval\" x=\"-20\" y=\"-169\"><comment pinned=\"false\" h=\"80\" w=\"160\">Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\nThe 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\nThe temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\nThe algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\nThe 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.</comment><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">60000</field></shadow></value><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"-23\" y=\"15\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"-27\" y=\"250\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">A high value to make sure the first temp is lower\nFunction to execute when Button A is pressed (show highest temp)\nPause for 1 second\nAssign the function to Button A</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global highest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is higher than the highest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update highest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Highest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"581\" y=\"266\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to execute when Button B is pressed (show lowest temp)\nPause for 1 second\nAssign the function to Button B</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global lowest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is lower than the lowest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update lowest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Lowest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","main.py":"# A high value to make sure the first temp is lower\n# Function to execute when Button A is pressed (show highest temp)\n# Pause for 1 second\n# Assign the function to Button A\n\ndef on_button_pressed_a():\n    global current_temp, highest_temp\n    # Access the global highest_temp variable\n    current_temp = input.temperature()\n    # Get the current temperature\n    if current_temp > highest_temp:\n        # If current temperature is higher than the highest recorded\n        highest_temp = current_temp\n    # Update highest temperature\n    basic.show_number(highest_temp * 1.8 + 32)\n    # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Highest Temp\")\n    # Label the display\n    basic.pause(1000)\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# Function to execute when Button B is pressed (show lowest temp)\n# Pause for 1 second\n# Assign the function to Button B\n\ndef on_button_pressed_b():\n    global current_temp2, lowest_temp\n    # Access the global lowest_temp variable\n    current_temp2 = input.temperature()\n    # Get the current temperature\n    if current_temp2 < lowest_temp:\n        # If current temperature is lower than the lowest recorded\n        lowest_temp = current_temp2\n    # Update lowest temperature\n    basic.show_number(lowest_temp * 1.8 + 32)\n    # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Lowest Temp\")\n    # Label the display\n    basic.pause(1000)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ncurrent_temp2 = 0\ncurrent_temp = 0\nlowest_temp = 0\nhighest_temp = 0\n# Start with initial temperature values\nhighest_temp = -100\n# A low value to make sure the first temp is higher\nlowest_temp = 1000\n# Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n# 'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n# 'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\n# The 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\n# The temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\n# The algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\n# The 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n# 'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.\n\ndef on_every_interval():\n    basic.show_number(input.temperature() * 1.8 + 32)\nloops.every_interval(60000, on_every_interval)\n","pxt.json":"{\n    \"name\": \"LArrys\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1731311458094,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</variable><variable id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</variable><variable id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</variable><variable id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</variable></variables><block type=\"every_interval\" x=\"-20\" y=\"-169\"><comment pinned=\"false\" h=\"80\" w=\"160\">Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\nThe 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\nThe temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\nThe algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\nThe 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.</comment><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">60000</field></shadow></value><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"-23\" y=\"15\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"-27\" y=\"250\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">A high value to make sure the first temp is lower\nFunction to execute when Button A is pressed (show highest temp)\nPause for 1 second\nAssign the function to Button A</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global highest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is higher than the highest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update highest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Highest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"581\" y=\"266\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to execute when Button B is pressed (show lowest temp)\nPause for 1 second\nAssign the function to Button B</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global lowest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is lower than the lowest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update lowest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Lowest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","main.py":"# Start with defining initial placeholder temperature values\ncurrent_temp2 = input.temperature()\ncurrent_temp = input.temperature()\nlowest_temp = 0 #WILL OVERWRITE LATER\nhighest_temp = 0 #WILL OVERWRITE LATER\n\n# A low value to make sure the first temp is higher\nhighest_temp = -100\n# A low value to make sure the first temp is lower\nlowest_temp = 1000\n\n# Define function to execute when Button A is pressed (show highest temp)\n# Pause for 1 second\n# Assign the function to Button A\ndef on_button_pressed_a():\n    # Access the global highest_temp variable\n    global current_temp, highest_temp\n    # NOT NECCASARY; PREDEFINED ABOVE; PURPOSE: Get the current temperature\n    current_temp = input.temperature()\n    if current_temp > highest_temp:\n        # If current temperature is higher than the highest recorded\n        highest_temp = current_temp\n    # Update highest temperature\n    basic.show_number(highest_temp * 1.8 + 32)\n    # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Highest Temp\")\n    # Label the display\n    basic.pause(1000)\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# Function to execute when Button B is pressed (show lowest temp)\n# Pause for 1 second\n# Assign the function to Button B\n\ndef on_button_pressed_b():\n    global current_temp2, lowest_temp\n    # Access the global lowest_temp variable\n    current_temp2 = input.temperature()\n    # Get the current temperature\n    if current_temp2 < lowest_temp:\n        # If current temperature is lower than the lowest recorded\n        lowest_temp = current_temp2\n    # Update lowest temperature\n    basic.show_number(lowest_temp * 1.8 + 32)\n    # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Lowest Temp\")\n    # Label the display\n    basic.pause(1000)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\n# Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n# 'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n# 'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\n# The 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\n# The temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\n# The algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\n# The 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n# 'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.\n\ndef on_every_interval():\n    basic.show_number(input.temperature() * 1.8 + 32)\nloops.every_interval(60000, on_every_interval)\n","pxt.json":"{\n    \"name\": \"LArrys\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1731318253899,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</variable><variable id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</variable><variable id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</variable><variable id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</variable></variables><block type=\"every_interval\" x=\"-20\" y=\"-169\"><comment pinned=\"false\" h=\"80\" w=\"160\">Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\nThe 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\nThe temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\nThe algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\nThe 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.</comment><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">60000</field></shadow></value><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"-23\" y=\"15\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Start with initial temperature values</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">-100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">A low value to make sure the first temp is higher</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"-27\" y=\"250\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">A high value to make sure the first temp is lower\nFunction to execute when Button A is pressed (show highest temp)\nPause for 1 second\nAssign the function to Button A</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global highest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is higher than the highest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"_hpkk{DfIx=?uJy*:xT,\">current_temp</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update highest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"0f3Cp1CX^MK[AFQFXB)}\">highest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Highest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"581\" y=\"266\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to execute when Button B is pressed (show lowest temp)\nPause for 1 second\nAssign the function to Button B</comment><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field><comment pinned=\"false\" h=\"80\" w=\"160\">Access the global lowest_temp variable</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Get the current temperature</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field><comment pinned=\"false\" h=\"80\" w=\"160\">If current temperature is lower than the lowest recorded</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Iy4qzRd14dA^@x$D4bJB\">current_temp2</field></block></value></block></statement><next><block type=\"device_show_number\"><comment pinned=\"false\" h=\"80\" w=\"160\">Update lowest temperature</comment><value name=\"number\"><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4l|bs6|nz.wv#QsEuAe7\">lowest_temp</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1.8</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">32</field></shadow></value></block></value><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Convert to Fahrenheit and show it</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">F - Lowest Temp</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Label the display</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","main.py":"# Start with defining initial placeholder temperature values\ncurrent_temp2 = input.temperature()\ncurrent_temp = input.temperature()\nlowest_temp = 0 #WILL OVERWRITE LATER\nhighest_temp = 0 #WILL OVERWRITE LATER\n\n# A low value to make sure the first temp is higher\nhighest_temp = -100\n# A low value to make sure the first temp is lower\nlowest_temp = 1000\n\n# Define function to execute when Button A is pressed (show highest temp)\n# Pause for 1 second\n# Assign the function to Button A\ndef on_button_pressed_a():\n    # Access the global highest_temp variable\n    global current_temp, highest_temp\n    # NOT NECCASARY; PREDEFINED ABOVE; PURPOSE: Get the current temperature\n    current_temp = input.temperature()\n    # If current temperature is higher than the highest recorded\n    if current_temp > highest_temp:\n        # Update highest temperature\n        highest_temp = current_temp\n    # Convert to Fahrenheit and show it\n    basic.show_number(highest_temp * 1.8 + 32)\n    # Label the display\n    basic.show_string(\"F - Highest Temp\")\n    # Pause 1 second\n    basic.pause(1000)\n#Invoke Function by Pressing \"A\" Button\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# Function to execute when Button B is pressed (show lowest temp)\n# Pause for 1 second\n# Assign the function to Button B\ndef on_button_pressed_b():\n    global current_temp2, lowest_temp\n    # Access the global lowest_temp variable\n    current_temp2 = input.temperature()\n    # Get the current temperature\n    if current_temp2 < lowest_temp:\n        # If current temperature is lower than the lowest recorded\n        lowest_temp = current_temp2\n    # Update lowest temperature\n    basic.show_number(lowest_temp * 1.8 + 32)\n    # Convert to Fahrenheit and show it\n    basic.show_string(\"F - Lowest Temp\")\n    # Label the display\n    basic.pause(1000)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\n# Defining the 'on_every_interval' function, which will be invoked at intervals later defined by 'loops.every_interval'.\n# 'basic' is the namespace for default functions for the BBC micro:bit, including 'show_number', which is invoked here.\n# 'basic.show_number' is a function that displays the passed argument (the temperature in Fahrenheit) on the micro:bit screen.\n# The 'input' namespace contains functions for reading input data, such as 'temperature()', which retrieves the current temperature.\n# The temperature value (in Celsius) is passed as an argument to 'basic.show_number', which then displays the Fahrenheit value.\n# The algebraic equation correctly converts the Celsius temperature to Fahrenheit: (C * 1.8) + 32.\n# The 'loops' namespace defines the 'every_interval' function, which sets up a repeating task.\n# 'loops.every_interval(60000, on_every_interval)' calls the 'on_every_interval' function every 60000 ms (1 minute) and repeats indefinitely.\n\ndef on_every_interval():\n    basic.show_number(input.temperature() * 1.8 + 32)\nloops.every_interval(60000, on_every_interval)\n","pxt.json":"{\n    \"name\": \"LArrys\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}}],"shares":[],"lastSaveTime":1731318393276}